{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["gameSlice","createSlice","name","initialState","id","color","cell","reducers","movePiece","state","action","payload","console","log","occupied","find","piece","green","yellow","blue","red","findHome","actions","mapDispatch","ConnectedPiece","connect","useDrag","item","type","collect","monitor","isDragging","end","result","getDropResult","drag","ref","className","style","backgroundColor","cursor","opacity","Spacer","Cell","children","useDrop","accept","drop","mon","isOver","canDrop","position","top","left","height","width","zIndex","gameState","cells","start","safe","pieces","rendered","x","y","key","toString","push","DndProvider","backend","Backend","Boolean","window","location","hostname","match","store","configureStore","reducer","gameReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27df3895.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n\n\n// Find an empty home cell for the given color.\nfunction findHome(state, color) {\n  const homes = {\n    green: [\"00\", \"01\", \"10\", \"11\"],\n    yellow: [\"0b\", \"0c\", \"1b\", \"1c\"],\n    blue: [\"bb\", \"bc\", \"cb\", \"cc\"],\n    red: [\"b0\", \"b1\", \"c0\", \"c1\"],\n  }\n  return homes[color].find(cell => !state.find(piece => piece.cell === cell))\n}\n\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState: [\n    {id: \"g1\", color: \"green\", cell: \"00\"},\n    {id: \"g2\", color: \"green\", cell: \"01\"},\n    {id: \"g3\", color: \"green\", cell: \"10\"},\n    {id: \"g4\", color: \"green\", cell: \"11\"},\n    {id: \"y1\", color: \"yellow\", cell: \"0b\"},\n    {id: \"y2\", color: \"yellow\", cell: \"0c\"},\n    {id: \"y3\", color: \"yellow\", cell: \"1b\"},\n    {id: \"y4\", color: \"yellow\", cell: \"1c\"},\n    {id: \"b1\", color: \"blue\", cell: \"bb\"},\n    {id: \"b2\", color: \"blue\", cell: \"bc\"},\n    {id: \"b3\", color: \"blue\", cell: \"cb\"},\n    {id: \"b4\", color: \"blue\", cell: \"cc\"},\n    {id: \"r1\", color: \"red\", cell: \"b0\"},\n    {id: \"r2\", color: \"red\", cell: \"b1\"},\n    {id: \"r3\", color: \"red\", cell: \"c0\"},\n    {id: \"r4\", color: \"red\", cell: \"c1\"},\n  ],\n  reducers: {\n    movePiece(state, action) {\n      const { payload } = action;\n      console.log(payload)\n      const occupied = state.find(piece => piece.cell === payload.cell)\n      if (occupied) {\n        occupied.cell = findHome(state, occupied.color)\n      }\n      state.find(piece => piece.id === payload.piece).cell = payload.cell\n    },\n  },\n})\n\nexport const { movePiece } = gameSlice.actions\n\nexport default gameSlice.reducer\n","import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux'\n\nimport { DndProvider } from 'react-dnd'\n// import Backend from 'react-dnd-html5-backend'\nimport Backend from 'react-dnd-touch-backend'\n\nimport { useDrag, useDrop } from 'react-dnd'\n\nimport { movePiece } from \"./Game.js\"\n\nconst mapDispatch = { movePiece };\n\nfunction Piece({ movePiece, color, id }) {\n  const [{isDragging}, drag] = useDrag({\n    item: { type: \"piece\", color: color, id: id},\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n    end: (item, monitor) => {\n      const result = monitor.getDropResult();\n      if ( result ) {\n        movePiece({piece: id, cell: result.cell});\n      }\n    },\n  })\n\n  return (\n    <span\n      ref={drag}\n      className=\"piece\"\n      style={{\n        backgroundColor: color,\n        cursor: \"move\",\n        opacity: isDragging ? 0.5 : 1.0,\n      }}>{id}</span>\n  )\n}\n\nconst ConnectedPiece = connect(null, mapDispatch)(Piece)\n\n\nfunction Spacer() {\n  return <div className=\"cell spacer\" />\n}\n\n\nfunction Cell({ id, color, children }) {\n  const [{isOver, canDrop}, drop] = useDrop({\n      accept: \"piece\",\n      drop: () => ({cell: id}),\n      collect: mon => ({\n        isOver: !!mon.isOver(),\n        canDrop: !!mon.canDrop(),\n      }),\n      canDrop: (item, mon) => {\n        return (!color || color === item.color)\n      },\n  })\n\n  return (\n    <div ref={drop} className=\"cell\" style={{position: 'relative'}}>\n      <div className={\"spot \" + color}>\n        {children}\n      </div>\n      {isOver && canDrop && (\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            height: '100%',\n            width: '100%',\n            zIndex: 1,\n            opacity: 0.5,\n            backgroundColor: 'yellow',\n          }}\n        />\n      )}\n    </div>\n  )\n}\n\n\nfunction App({ gameState }) {\n  const cells = {\n    \"00\": {color: \"green\", start: true},\n    \"01\": {color: \"green\", start: true},\n    \"05\": {},\n    \"06\": {},\n    \"07\": {},\n    \"0b\": {color: \"yellow\", start: true},\n    \"0c\": {color: \"yellow\", start: true},\n\n    \"10\": {color: \"green\", start: true},\n    \"11\": {color: \"green\", start: true},\n    \"15\": {},\n    \"16\": {color: \"yellow\"},\n    \"17\": {},\n    \"1b\": {color: \"yellow\", start: true},\n    \"1c\": {color: \"yellow\", start: true},\n\n    \"25\": {},\n    \"26\": {color: \"yellow\"},\n    \"27\": {},\n\n    \"35\": {},\n    \"36\": {color: \"yellow\"},\n    \"37\": {},\n\n    \"45\": {},\n    \"46\": {color: \"yellow\"},\n    \"47\": {},\n\n    \"50\": {},\n    \"51\": {},\n    \"52\": {},\n    \"53\": {},\n    \"54\": {},\n    \"55\": {safe: true},\n    \"57\": {safe: true},\n    \"58\": {},\n    \"59\": {},\n    \"5a\": {},\n    \"5b\": {},\n    \"5c\": {},\n\n    \"60\": {},\n    \"61\": {color: \"green\"},\n    \"62\": {color: \"green\"},\n    \"63\": {color: \"green\"},\n    \"64\": {color: \"green\"},\n    \"68\": {color: \"blue\"},\n    \"69\": {color: \"blue\"},\n    \"6a\": {color: \"blue\"},\n    \"6b\": {color: \"blue\"},\n    \"6c\": {},\n\n    \"70\": {},\n    \"71\": {},\n    \"72\": {},\n    \"73\": {},\n    \"74\": {},\n    \"75\": {safe: true},\n    \"77\": {safe: true},\n    \"78\": {},\n    \"79\": {},\n    \"7a\": {},\n    \"7b\": {},\n    \"7c\": {},\n\n    \"85\": {},\n    \"86\": {color: \"red\"},\n    \"87\": {},\n\n    \"95\": {},\n    \"96\": {color: \"red\"},\n    \"97\": {},\n\n    \"a5\": {},\n    \"a6\": {color: \"red\"},\n    \"a7\": {},\n\n    \"b0\": {color: \"red\", start: true},\n    \"b1\": {color: \"red\", start: true},\n    \"b5\": {},\n    \"b6\": {color: \"red\"},\n    \"b7\": {},\n    \"bb\": {color: \"blue\", start: true},\n    \"bc\": {color: \"blue\", start: true},\n\n    \"c0\": {color: \"red\", start: true},\n    \"c1\": {color: \"red\", start: true},\n    \"c5\": {},\n    \"c6\": {},\n    \"c7\": {},\n    \"cb\": {color: \"blue\", start: true},\n    \"cc\": {color: \"blue\", start: true},\n  }\n\n  const pieces = {}\n  for (let piece of gameState) {\n    // for (let i = 0; i < gameState.pieces.length; i++) {\n    // let piece = gameState.pieces[i]\n    pieces[piece.cell] = <ConnectedPiece color={piece.color} id={piece.id} />\n  }\n\n  const rendered = []\n  for (let x = 0; x < 13; x++) {\n    for (let y = 0; y < 13; y++) {\n      let key = x.toString(16) + y.toString(16)\n      if (key in cells) {\n        rendered.push(\n          <Cell id={key} key={key} {...cells[key]}>\n            {pieces[key] || null}\n          </Cell>\n        )\n      } else {\n        rendered.push(<Spacer key={key} />)\n      }\n    }\n  }\n\n  return (\n    <DndProvider backend={Backend}>\n      <div className=\"Board\">\n        {rendered}\n      </div>\n    </DndProvider>\n  )\n}\n\nconst mapStateToProps = state => ({ gameState: state })\n// export default App;\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { configureStore } from \"@reduxjs/toolkit\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport gameReducer from './Game';\n\nconst store = configureStore({\n  reducer: gameReducer,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}